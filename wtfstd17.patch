diff --git a/Source/WTF/wtf/StdLibExtras.h b/Source/WTF/wtf/StdLibExtras.h
index 2e35031..c6556e2 100644
--- a/Source/WTF/wtf/StdLibExtras.h
+++ b/Source/WTF/wtf/StdLibExtras.h
@@ -337,18 +337,22 @@ template<class T, size_t N> struct _Unique_if<T[N]> {
     typedef void _Known_bound;
 };
 
+/*
 template<class T, class... Args> inline typename _Unique_if<T>::_Single_object
 make_unique(Args&&... args)
 {
     return unique_ptr<T>(new T(std::forward<Args>(args)...));
 }
+*/
 
+/*
 template<class T> inline typename _Unique_if<T>::_Unknown_bound
 make_unique(size_t n)
 {
     typedef typename remove_extent<T>::type U;
     return unique_ptr<T>(new U[n]());
 }
+*/
 
 template<class T, class... Args> typename _Unique_if<T>::_Known_bound
 make_unique(Args&&...) = delete;
@@ -357,9 +361,11 @@ make_unique(Args&&...) = delete;
 // Compile-time integer sequences
 // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3658.html
 // (Note that we only implement index_sequence, and not the more generic integer_sequence).
+/*
 template<size_t... indexes> struct index_sequence {
     static size_t size() { return sizeof...(indexes); }
 };
+*/
 
 template<size_t currentIndex, size_t...indexes> struct make_index_sequence_helper;
 
@@ -370,8 +376,8 @@ template<size_t...indexes> struct make_index_sequence_helper<0, indexes...> {
 template<size_t currentIndex, size_t...indexes> struct make_index_sequence_helper {
     typedef typename make_index_sequence_helper<currentIndex - 1, currentIndex - 1, indexes...>::type type;
 };
-
-template<size_t length> struct make_index_sequence : public make_index_sequence_helper<length>::type { };
+/*
+template<size_t length> struct make_index_sequence : public make_index_sequence_helper<length>::type { };*/
 
 #if COMPILER_SUPPORTS(CXX_USER_LITERALS)
 // These literals are available in C++14, so once we require C++14 compilers we can get rid of them here.
